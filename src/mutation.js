import {
  fromGlobalId
} from "graphql-relay";

const {
  attributeFields
} = require('graphql-sequelize');

import {
  upperFirst,
  camelCase,
  merge
} from "lodash";

import {
  GraphQLNonNull,
  GraphQLString
} from "graphql";

import {
  toCursor,
  fromCursor
} from "./utils/cursor";

export function createCreateMutation(model, graphqlType) {
  const {
      create: { exclude, before, after }
    } = model.options.graphql = merge({
      create: {
        exclude: []
      }
    }, model.options.graphql);

  Object.keys(model.tableAttributes).reduce(function (data, current) {
    const item = model.tableAttributes[current];
    if (item.primaryKey || item._autoGenerated) {
      data.push(current);
    }
    return data;
  }, exclude);

  return {
    name: `create${upperFirst(model.name)}`,
    inputFields: attributeFields(model, {
      commentToDescription: true,
      globalId: false,
      exclude: exclude
    }),
    outputFields: {
      [camelCase(graphqlType.name)]: {
        type: graphqlType,
        resolve: function (source) {
          return { node: source, cursor: toCursor(source) };
        },
      }
    },
    mutateAndGetPayload: function (args, context, info) {
      if (model.options.graphql && model.options.graphql.before) {
        model.options.graphql.before(args, context, info);
      }
      if (before) {
        before(args, context, info);
      }
      return model.create(args).then(function (result) {
        if (after) {
          after(args, context, info, result);
        }
        return result;
      });
    },
  }
}

export function createUpdateMutation(model, graphqlType) {
  const {
      update: { exclude, before, after }
    } = model.options.graphql = merge({
      update: {
        exclude: []
      }
    }, model.options.graphql);

  Object.keys(model.tableAttributes).reduce(function (data, current) {
    const item = model.tableAttributes[current];
    if (item.primaryKey || item._autoGenerated) {
      data.push(current);
    }
    return data;
  }, exclude);

  return {
    name: `update${upperFirst(model.name)}`,
    inputFields: merge({ id: { type: new GraphQLNonNull(GraphQLString) } }, attributeFields(model, {
      commentToDescription: true,
      globalId: false,
      exclude: exclude
    })),
    outputFields: {
      [camelCase(graphqlType.name)]: {
        type: graphqlType,
        resolve: function (source) {
          return source ? { node: source, cursor: toCursor(source) } : null;
        },
      }
    },
    mutateAndGetPayload: function (args, context, info) {
      return model.findById(parseInt(fromGlobalId(args.id).id, 10)).then(function (row) {
        if (!row) {
          return {};
        }
        if (model.options.graphql && model.options.graphql.before) {
          model.options.graphql.before(args, context, info);
        }
        if (before) {
          before(args, context, info, row);
        }
        return row.update(args);
      }).then(function (result) {
        if (after) {
          after(args, context, info, result);
        }
        return result;
      });
    },
  }
}

export function createDeleteMutation(model, graphqlType) {
  const {
      delete: { before, after }
    } = model.options.graphql = merge({
      delete: {}
    }, model.options.graphql);

  return {
    name: `delete${upperFirst(model.name)}`,
    inputFields: {
      id: { type: new GraphQLNonNull(GraphQLString) }
    },
    outputFields: {
      [camelCase(graphqlType.name)]: {
        type: graphqlType,
        resolve: function (source) {
          return source ? { node: source, cursor: toCursor(source) } : null;
        },
      }
    },
    mutateAndGetPayload: function (args, context, info) {
      return model.findById(parseInt(fromGlobalId(args.id).id, 10)).then((row) => {
        if (!row) {
          return {};
        }
        if (model.options.graphql && model.options.graphql.before) {
          model.options.graphql.before(args, context, info);
        }
        if (before) {
          before(args, context, info, row);
        }
        return row ? row.destroy(args).then(() => {
          if (after) {
            after(args, context, info, row);
          }
          return row;
        }) : {};
      });
    },
  }
}